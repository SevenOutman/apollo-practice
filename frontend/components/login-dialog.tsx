"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/pHST8KaRD84
 */
import { gql } from "@/app/__generated__";
import { Button } from "@/components/ui/button";
import {
  DialogTrigger,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
  DialogContent,
  Dialog,
} from "@/components/ui/dialog";
import {
  SelectValue,
  SelectTrigger,
  SelectLabel,
  SelectItem,
  SelectGroup,
  SelectContent,
  Select,
} from "@/components/ui/select";
import { useMutation, useQuery } from "@apollo/client";
import { useState } from "react";

const GET_LOGIN_USERS = gql(/* GraphQL */ `
  query GetLoginUsers {
    users {
      id
      name
    }
  }
`);

const LOGIN = gql(/* GraphQL */ `
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      token
    }
  }
`);

type LoginDialogProps = {
  onLoginSuccess?: () => void;
};

export function LoginDialog({ onLoginSuccess }: LoginDialogProps) {
  const { data } = useQuery(GET_LOGIN_USERS);
  const [open, setOpen] = useState(false);
  const [login, loginMutation] = useMutation(LOGIN, {
    onCompleted(data) {
      if (data.login.token) {
        localStorage.setItem("token", data.login.token);
        setOpen(false);
        onLoginSuccess?.();
      }
    },
  });

  const [loginUserId, setLoginUserId] = useState<string>();
  return (
    <Dialog open={open} onOpenChange={(value) => setOpen(value)}>
      <DialogTrigger asChild>
        <Button variant="outline">Login</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px] bg-white dark:bg-gray-800">
        <DialogHeader>
          <DialogTitle className="text-black dark:text-white">
            Login
          </DialogTitle>
          <DialogDescription className="text-gray-600 dark:text-gray-300">
            Select your user from the dropdown and click Login.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <Select onValueChange={(value) => setLoginUserId(value)}>
            <SelectTrigger className="w-full">
              <SelectValue
                className="text-gray-900 dark:text-gray-100"
                placeholder="Select a user"
              />
            </SelectTrigger>
            <SelectContent className="bg-white dark:bg-gray-900">
              <SelectGroup>
                <SelectLabel className="text-black dark:text-white">
                  Users
                </SelectLabel>
                {data?.users.map((user) => (
                  <SelectItem
                    className="text-black dark:text-white"
                    key={user.id}
                    value={String(user.id)}
                  >
                    {user.name}
                  </SelectItem>
                ))}
              </SelectGroup>
            </SelectContent>
          </Select>
        </div>
        <DialogFooter>
          <Button
            type="submit"
            disabled={!loginUserId}
            loading={loginMutation.loading}
            onClick={() =>
              login({
                variables: {
                  input: {
                    userId: Number(loginUserId),
                  },
                },
              })
            }
          >
            Login
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
